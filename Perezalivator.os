///////////////////////////////////////////////////////////////////////
// ПРОГРАММА ДЛЯ "ПЕРЕЗАЛИВКИ" БАЗ
// Автор: Онянов Виталий (Tavalik.ru)
// Версия от 15.08.2017
//

#Использовать json
#Использовать gui
#Использовать TLog
#Использовать TRun1C
#Использовать TMSSQL
#Использовать TMail 
#Использовать v8runner

Перем Логирование, УправлениеЭП;
Перем УправляемыйИнтерфейс, ФормаВыбораНастроек;
Перем ТаблицаБазаИсточник, ТаблицаБазаПриемник, ТаблицаПользователи;
Перем КонтрольАктивныхСеансовПройден, ИндексБазыИсточник, ИндексБазыПриемник;
Перем РежимОтладки, РежимТестирования;

//******************************************************************
Процедура Инициализация()

	////////////////////////////////////////
	// Обнулим глобальные перменные
	КонтрольАктивныхСеансовПройден = Ложь;
	ИндексБазыИсточник = 0;
	ИндексБазыПриемник = 0;
	РежимОтладки = Ложь;
	РежимТестирования = Ложь;
	
	
	////////////////////////////////////////
	// Каталог для хранения логов
	ИдентификаторЗадания = "Perezalivator";
	КаталогХраненияЛогов = ".\_Logs\";
	Логирование = Новый ТУправлениеЛогированием(); //TLog
	Логирование.ДатаВремяВКаждойСтроке = Истина;
	Логирование.ВыводитьСообщенияПриЗаписи = Истина;	
	Логирование.СоздатьФайлЛога(ИдентификаторЗадания,КаталогХраненияЛогов);
	
	
	////////////////////////////////////////
	// Настройка электорнной почты
	УправлениеЭП = Новый ТУправлениеЭлектроннойПочтой();

	
	////////////////////////////////////////
	// Прочитаем параметры
	
	// Заполняем источники
	ТаблицаБазаИсточник = Новый ТаблицаЗначений;
	ТаблицаБазаИсточник.Колонки.Добавить("Имя");
	ТаблицаБазаИсточник.Колонки.Добавить("АдресСервераSQL");
	ТаблицаБазаИсточник.Колонки.Добавить("ИмяПользователяSQL");
	ТаблицаБазаИсточник.Колонки.Добавить("ПарольПользователяSQL");
	ТаблицаБазаИсточник.Колонки.Добавить("ИмяБазыДанныхSQL");

	// Заполняем приемники
	ТаблицаБазаПриемник = Новый ТаблицаЗначений;
	ТаблицаБазаПриемник.Колонки.Добавить("Имя");
	ТаблицаБазаПриемник.Колонки.Добавить("ПутьКПлатформе1С");
	ТаблицаБазаПриемник.Колонки.Добавить("ТипБазы");
	ТаблицаБазаПриемник.Колонки.Добавить("ВерсияCOMConnector");
	ТаблицаБазаПриемник.Колонки.Добавить("ИмяБазы");
	ТаблицаБазаПриемник.Колонки.Добавить("АдресКластера");
	ТаблицаБазаПриемник.Колонки.Добавить("ПортКластера");
	ТаблицаБазаПриемник.Колонки.Добавить("ПортАгента");
	ТаблицаБазаПриемник.Колонки.Добавить("ИмяПользователяАдминистратораКластера");
	ТаблицаБазаПриемник.Колонки.Добавить("ПарольПользователяАдминистратораКластера");
	ТаблицаБазаПриемник.Колонки.Добавить("ИмяПользователя");
	ТаблицаБазаПриемник.Колонки.Добавить("ПарольПользователя");
	ТаблицаБазаПриемник.Колонки.Добавить("АдресХранилища");
	ТаблицаБазаПриемник.Колонки.Добавить("ИмяПользователяХранилища");
	ТаблицаБазаПриемник.Колонки.Добавить("ПарольПользователяХранилища");	
	ТаблицаБазаПриемник.Колонки.Добавить("АдресСервераSQL");
	ТаблицаБазаПриемник.Колонки.Добавить("ИмяПользователяSQL");
	ТаблицаБазаПриемник.Колонки.Добавить("ПарольПользователяSQL");
	ТаблицаБазаПриемник.Колонки.Добавить("ИмяБазыДанныхSQL");
	ТаблицаБазаПриемник.Колонки.Добавить("ОтключитьРИБ");
	
	// Прочитаем путь к файлу настроек из командной строки
	МассивФайловНастроек = Новый Массив;
	Для Сч = 0 По АргументыКоманднойСтроки.Количество()-1 Цикл
		Аргумент = АргументыКоманднойСтроки.Получить(Сч);
		Если Лев(Аргумент,1) = "-" Тогда
			// Специальные параметры
			Если СокрЛП(Аргумент) = "-debug" Тогда
				РежимОтладки = Истина;
				Сообщить("--------------------------------------------");
				Сообщить("ЗАПУСК В РЕЖИМЕ ОТЛАДКИ");
				Сообщить("--------------------------------------------");
			КонецЕсли;
			Если СокрЛП(Аргумент) = "-test" Тогда
				РежимТестирования = Истина;
				Сообщить("--------------------------------------------");
				Сообщить("ЗАПУСК В РЕЖИМЕ ТЕСТИРОВАНИЯ НАСТРОЕК");
				Сообщить("--------------------------------------------");
			КонецЕсли;
		Иначе
			// Файл с настройками
			МассивФайловНастроек.Добавить(СокрЛП(Аргумент));
		КонецЕсли;
	КонецЦикла;
	
	// Обработаем файлы настроек
	Сч = 0;
	Пока Истина Цикл

		ПутьКФайлуНастроек = МассивФайловНастроек.Получить(Сч);
		Файл = Новый Файл(ПутьКФайлуНастроек);
		Если файл.Существует() Тогда
			
			// Получим текст файла
			ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуНастроек, КодировкаТекста.UTF8);
			ТекстФайлаНастроек = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			Сообщить("Прочитан файл настроек: " + Файл.ПолноеИмя);
			
			Попытка
				ЧтениеJSON = Новый ПарсерJSON;
				ПараметрыИзФайла = ЧтениеJSON.ПрочитатьJSON(ТекстФайлаНастроек,,,Истина);
				ПрочитатьПараметрыРекурсивно(ПараметрыИзФайла);
			Исключение
				Сообщить(ОписаниеОшибки());
				ЗавершитьРаботу(1);
			КонецПопытки;

			Сч = Сч + 1;			
		Иначе
			Сообщить("Не найден файл настроек по пути: " + ПутьКФайлуНастроек);
			МассивФайловНастроек.Удалить(Сч);
		КонецЕсли;

		Если Сч = МассивФайловНастроек.Количество() Тогда
			Прервать;
		КонецЕсли;		

	КонецЦикла;

	// Если файл не бы передан в параметрах, найдем его в каталоге
	Если МассивФайловНастроек.Количество() = 0 Тогда
		// Попробуем найти файл настроек в текущем каталоге
		ПутьКФайлуНастроек = ОбъединитьПути(ТекущийСценарий().Каталог,"Perezalivator_Params.json");
		Файл = Новый Файл(ПутьКФайлуНастроек);
		Если Не файл.Существует() Тогда
			Если СоздатьШаблонФайлаНастроек(ПутьКФайлуНастроек) Тогда
				МассивФайловНастроек.Добавить(ПутьКФайлуНастроек);
				Сообщить("Создан шаблон файла настроек. Заполните файл и перезапустите программу.");
				ЗавершитьРаботуСПаузой();
			Иначе
				ЗавершитьРаботу(1);
			КонецЕсли;
		КонецЕсли;
		МассивФайловНастроек.Добавить(ПутьКФайлуНастроек);
	КонецЕсли;

	Если РежимТестирования Тогда
		ВыполнитьТестНастроек();
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////
    // Загружаем внешнюю компоненту oscript-gui.dll
    УправляемыйИнтерфейс = Новый УправляемыйИнтерфейс();
    ФормаВыбораНастроек = УправляемыйИнтерфейс.СоздатьФорму();
    ФормаВыбораНастроек.УстановитьДействие(ЭтотОбъект, "ПриОткрытии", "ПриОткрытииФормы");
 	ФормаВыбораНастроек.Показать();	
	
КонецПроцедуры

//******************************************************************
Процедура ЗавершитьРаботуСПаузой()

	Сообщить("Для продолжения нажмите любую клавишу...");
	Консоль = Новый Консоль();
	ОбщееОжидание = 0;
	Пока Не Консоль.НажатаКлавиша И ОбщееОжидание < 60000 Цикл
		Приостановить(100);
		ОбщееОжидание = ОбщееОжидание + 100;
	КонецЦикла;
	ЗавершитьРаботу(1);

КонецПроцедуры

//******************************************************************
Процедура ПрочитатьПараметрыРекурсивно(Параметры, СтруктураЗначений = "")
	
	Для Каждого Параметр Из Параметры Цикл
		
		//Сообщить("- " + ТипЗнч(Параметр.Значение) + ", " + Строка(Параметр.Ключ) + ", " + Строка(Параметр.Значение));
		
		Если ТипЗнч(Параметр.Значение) = Тип("Структура")
			ИЛИ ТипЗнч(Параметр.Значение) = Тип("Соответствие") Тогда
			
			Если Параметр.Ключ = "НастройкиSMTP" Тогда
				СтруктураЗначений = УправлениеЭП.УчетнаяЗаписьЭП;
			ИначеЕсли Параметр.Ключ = "ПолучателиСообщений" Тогда
				СтруктураЗначений = УправлениеЭП.СтруктураСообщения;
			КонецЕсли;
			ПрочитатьПараметрыРекурсивно(Параметр.Значение, СтруктураЗначений);
			
		ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
			
			Для Каждого ЭлементМассива Из Параметр.Значение Цикл
				Если Параметр.Ключ = "Источники" Тогда
					СтруктураЗначений = ТаблицаБазаИсточник.Добавить();
				ИначеЕсли Параметр.Ключ = "Приемники" Тогда
					СтруктураЗначений = ТаблицаБазаПриемник.Добавить();
				КонецЕсли;
				ПрочитатьПараметрыРекурсивно(ЭлементМассива, СтруктураЗначений)
			КонецЦикла;
			
		Иначе
			СтруктураЗначений[Параметр.Ключ] = Параметр.Значение;			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//******************************************************************
Функция СоздатьШаблонФайлаНастроек(ПутьКФайлуНастроек)

	Попытка
		ЗаписьТекста = Новый ЗаписьТекста();
		ЗаписьТекста.Открыть(ПутьКФайлуНастроек,КодировкаТекста.UTF8);
		ЗаписьТекста.ЗаписатьСтроку(
		"{
		|	""Источники"":
		|	[
		|		{
		|			""Имя"" : 								""Пример_База_Источник"",
		|			""АдресСервераSQL"" : 					"""",
		|			""ИмяПользователяSQL"" :					"""",
		|			""ПарольПользователяSQL"" :				"""",
		|			""ИмяБазыДанныхSQL"" : 					""""
		|		}
		|	],
		|	""Приемники"": 
		|	[
		|		{
		|			""Имя"" : 								""Пример_База_Применик1"",
		|			""ПутьКПлатформе1С"" : 					""C:\\Program Files (x86)\\1cv8\\8.3.х.хххх\\bin\\1cv8.exe"",
		|			""ТипБазы"" : 							""S"",
		|			""ВерсияCOMConnector"" :					""83"",
		|			""ИмяБазы"" : 							"""",
		|			""АдресКластера"" : 						"""",
		|			""ПортКластера"" : 						""1541"",
		|			""ПортАгента"" :							""1540"",
		|			""ИмяПользователяАдминистратораКластера"" : 					"""",
		|			""ПарольПользователяАдминистратораКластера"" : 					"""",
		|			""ИмяПользователя"" : 					"""",
		|			""ПарольПользователя"" :					"""",
		|			""АдресХранилища"" :						"""",
		|			""ИмяПользователяХранилища"" : 			"""",
		|			""ПарольПользователяХранилища"" : 		"""",	
		|			""АдресСервераSQL"" : 					"""",
		|			""ИмяПользователяSQL"" : 					"""",
		|			""ПарольПользователяSQL"" : 				"""",
		|			""ИмяБазыДанныхSQL"" : 					"""",
		|			""ОтключитьРИБ"" : 					false,
	|		},
		|		{
		|			""Имя"" : 								""Пример_База_Применик2"",
		|			""ПутьКПлатформе1С"" : 					""C:\\Program Files (x86)\\1cv8\\8.3.х.хххх\\bin\\1cv8.exe"",
		|			""ТипБазы"" : 							""S"",
		|			""ВерсияCOMConnector"" :					""83"",
		|			""ИмяБазы"" : 							"""",
		|			""АдресКластера"" : 						"""",
		|			""ПортКластера"" : 						""1541"",
		|			""ПортАгента"" :							""1540"",
		|			""ИмяПользователяАдминистратораКластера"" : 					"""",
		|			""ПарольПользователяАдминистратораКластера"" : 					"""",
		|			""ИмяПользователя"" : 					"""",
		|			""ПарольПользователя"" :					"""",
		|			""АдресХранилища"" :						"""",
		|			""ИмяПользователяХранилища"" : 			"""",
		|			""ПарольПользователяХранилища"" : 		"""",	
		|			""АдресСервераSQL"" : 					"""",
		|			""ИмяПользователяSQL"" : 					"""",
		|			""ПарольПользователяSQL"" : 				"""",
		|			""ИмяБазыДанныхSQL"" : 					""""
		|		}
		|	],
		|	""ЭлектроннаяПочта"": 
		|	{
		|		""НастройкиSMTP"":
		|		{
		|			""АдресSMTP"" : 							""smtp.domen.ru"",
		|			""ПортSMTP"" : 							465,
		|			""ПользовательSMTP"" : 					"""",
		|			""ПарольSMTP"" : 							"""",
		|			""ИспользоватьSSL"" : 					true
		|		},
		|		""ПолучателиСообщений"":
		|		{
		|			""АдресЭлектроннойПочтыПолучателя"" : 	""myname@domen.ru;""
		|		}
		|	}
		|}");
		ЗаписьТекста.Закрыть();
	Исключение
		Возврат Ложь;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

//******************************************************************
Процедура ПриОткрытииФормы() Экспорт

	ФормаВыбораНастроек.Заголовок = "ПЕРЕЗАЛИВАТОР v1.0";
    ФормаВыбораНастроек.Высота = 480;
	ФормаВыбораНастроек.Ширина = 680;
    
	// ПолеФлажкаУдалитьИБПриемник
	ПолеФормы= ФормаВыбораНастроек.Элементы.Добавить("ПолеФлажкаУдалитьИБПриемник", "ПолеФормы", Неопределено);
	ПолеФормы.Заголовок = "Удалить ИБ Приемник";
	ПолеФормы.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеФлажка;
    ПолеФормы.УстановитьДействие(ЭтотОбъект, "ПриИзменении", "ПриИзменииПолеФлажкаУдалитьИБПриемник");
	ПолеФормы.Закрепление = УправляемыйИнтерфейс.СтильЗакрепления.Право;
	ПолеФормы.ПоложениеЗаголовка = УправляемыйИнтерфейс.ПоложениеЗаголовка.Право;

	// Группа НаДату
	ПолеФормы = ФормаВыбораНастроек.Элементы.Добавить("НадписьСхема", "ПолеФормы", Неопределено);
	ПолеФормы.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеНадписи;
	ПолеФормы.Заголовок = "Схема:";

	// ПолеСоСпискомИсточник
    Данные = Новый Соответствие; Сч = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаБазаИсточник Цикл
		Данные.Вставить(СтрокаТаблицы.Имя, Сч); Сч = Сч + 1;
	КонецЦикла;
    ПолеФормы = ФормаВыбораНастроек.Элементы.Добавить("ПолеСоСпискомИсточник", "ПолеФормы", Неопределено);
    ПолеФормы.Заголовок = "   База источник:    ";
    ПолеФормы.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеСоСписком;
    ПолеФормы.СписокВыбора = Данные;
	ПолеФормы.Значение = 0;
    ПолеФормы.УстановитьДействие(ЭтотОбъект, "ПриИзменении", "ПриИзменииПолеСоСпискомИсточник");
	
	// ПолеСоСпискомПриемник
	Данные = Новый Соответствие; Сч = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаБазаПриемник Цикл
		Данные.Вставить(СтрокаТаблицы.Имя, Сч); Сч = Сч + 1;
	КонецЦикла;
	ПолеФормы = ФормаВыбораНастроек.Элементы.Добавить("ПолеСоСпискомПриемник", "ПолеФормы", Неопределено);
    ПолеФормы.Заголовок = "   База назначения:";
    ПолеФормы.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеСоСписком;
	ПолеФормы.СписокВыбора = Данные;
	ПолеФормы.Значение = 0;
    ПолеФормы.УстановитьДействие(ЭтотОбъект, "ПриИзменении", "ПриИзменииПолеСоСпискомПриемник");
	
	// ПолеФлажкаСоздатьИБПриемник
	ПолеФормы= ФормаВыбораНастроек.Элементы.Добавить("ПолеФлажкаСоздатьИБПриемник", "ПолеФормы", Неопределено);
	ПолеФормы.Заголовок = "Создать ИБ Приемник                        ";
	ПолеФормы.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеФлажка;
    ПолеФормы.УстановитьДействие(ЭтотОбъект, "ПриИзменении", "ПриИзменииПолеФлажкаСоздатьИБПриемник");

	// ПолеИмяБазы (при создании и удалении)
	ПолеФормы = ФормаВыбораНастроек.Элементы.Добавить("ПолеИмяБазы", "ПолеФормы", Неопределено);
	ПолеФормы.Заголовок = "   ИмяБазы (=ИмяБазыДанныхSQL):";
	ПолеФормы.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеВвода;
    ПолеФормы.УстановитьДействие(ЭтотОбъект, "ПриИзменении", "ПриИзменииПолеИмяБазы");
	
	// Группа НаДату
	ПолеФормы = ФормаВыбораНастроек.Элементы.Добавить("НадписьНаДату", "ПолеФормы", Неопределено);
	ПолеФормы.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеНадписи;
	ПолеФормы.Заголовок = "Перезалить на:";

	// Дата
	ПолеФормы = ФормаВыбораНастроек.Элементы.Добавить("Дата", "ПолеФормы", Неопределено);
    ПолеФормы.Заголовок = "   на дату:";
    ПолеФормы.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеКалендаря;
	ПолеФормы.Значение = ТекущаяДата();

	// ПолеФлажкаНаМоментВремени
	ПолеФормы= ФормаВыбораНастроек.Элементы.Добавить("ПолеФлажкаНаМоментВремени", "ПолеФормы", Неопределено);
	ПолеФормы.Заголовок = "   на момент времени    ";
	ПолеФормы.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеФлажка;
	ПолеФормы.УстановитьДействие(ЭтотОбъект, "ПриИзменении", "ПриИзменииПолеФлажкаНаМоментВремени");

	// ПолеМоментВремени
	ПолеФормы = ФормаВыбораНастроек.Элементы.Добавить("ПолеМоментВремени", "ПолеФормы", Неопределено);
	ПолеФормы.Заголовок = "   dd.MM.yyyy ЧЧ:мм:сс:";
	ПолеФормы.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеВвода;

	// ПолеФлажкаТекущаяКопияБазы
	ПолеФормы= ФормаВыбораНастроек.Элементы.Добавить("ПолеФлажкаТекущаяКопияБазы", "ПолеФормы", Неопределено);
	ПолеФормы.Заголовок = "   текущая копия базы   ";
	ПолеФормы.Вид = ФормаВыбораНастроек.ВидПоляФормы.ПолеФлажка;
	ПолеФормы.УстановитьДействие(ЭтотОбъект, "ПриИзменении", "ПриИзменииПолеФлажкаТекущаяКопияБазы");

	// ПолеЛог
	ПолеФормы = ФормаВыбораНастроек.Элементы.Добавить("ПолеЛог", "ПолеФормы", Неопределено);
	ПолеФормы.Вид  = ФормаВыбораНастроек.ВидПоляФормы.ПолеНадписи;
	ПолеФормы.Заголовок = "Лог выполнения обработки:";
	ПолеФормы.ПоложениеЗаголовка = УправляемыйИнтерфейс.ПоложениеЗаголовка.Верх;	
	ПолеФормы.Высота = 220;
	ПолеФормы.Закрепление = УправляемыйИнтерфейс.СтильЗакрепления.Верх;
	
	// ПолеПользователи
	ПолеФормы = ФормаВыбораНастроек.Элементы.Добавить("ПолеПользователи", "ТаблицаФормы", Неопределено);
	ПолеФормы.Заголовок = "ВНИМАНИЕ! Имеются активые соединения с базой приемником:";
	ПолеФормы.ПоложениеЗаголовка = УправляемыйИнтерфейс.ПоложениеЗаголовка.Верх;
	
	Кнопка = ФормаВыбораНастроек.Элементы.Добавить("КнопкаПродолжить", "КнопкаФормы", Неопределено);
    Кнопка.Заголовок = "ЗАВЕРШИТЬ ВСЕ СЕАНСЫ И ПРОДОЛЖИТЬ";
	Кнопка.УстановитьДействие(ЭтотОбъект, "Нажатие", "ПриНажатииНаКнопкуВыполнить");

	Кнопка = ФормаВыбораНастроек.Элементы.Добавить("КнопкаОбновить", "КнопкаФормы", Неопределено);
    Кнопка.Заголовок = "Обновить";
	Кнопка.УстановитьДействие(ЭтотОбъект, "Нажатие", "ПриНажатииНаКнопкуОбновить");

	Группа = ФормаВыбораНастроек.Элементы.Добавить("ГруппаКнопки", "ГруппаФормы", Неопределено);
	Группа.Вид = УправляемыйИнтерфейс.ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Закрепление = УправляемыйИнтерфейс.СтильЗакрепления.Низ;
	
	Кнопка = ФормаВыбораНастроек.Элементы.Добавить("КнопкаВыполнить", "КнопкаФормы", Группа);
    Кнопка.Заголовок = "Выполнить";
    Кнопка.УстановитьДействие(ЭтотОбъект, "Нажатие", "ПриНажатииНаКнопкуВыполнить");
	
	Кнопка = ФормаВыбораНастроек.Элементы.Добавить("КнопкаЗакрыть", "КнопкаФормы", Группа);
    Кнопка.Заголовок = "Закрыть";
    Кнопка.УстановитьДействие(ЭтотОбъект, "Нажатие", "ПриНажатииНаКнопкуЗакрыть");
	
	ФормаВыбораНастроек.Элементы.Переместить(Группа,ФормаВыбораНастроек,ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаУдалитьИБПриемник"));
	Группа.Закрепление = УправляемыйИнтерфейс.СтильЗакрепления.Право;

	УправлениеДиалогом(0);

КонецПроцедуры

//******************************************************************
Процедура УправлениеДиалогом(Этап = 0)

	Если Этап = 0 Тогда
		ТекстКнопкиВыполнить = "Перезалить базу";
		ДоступностьНастроек = Истина;
		ДоступностьОбновитьОтмена = Ложь;
		ВидимостьПолеПользователи = Ложь;
	ИначеЕсли Этап = 1 Тогда
		Если ТаблицаПользователи <> Неопределено И ТаблицаПользователи.Количество() = 0 Тогда
			ТекстКнопкиВыполнить = "Перезалить базу";
		Иначе
			ТекстКнопкиВыполнить = "ЗАВЕРШИТЬ ВСЕ СЕАНСЫ И ПРОДОЛЖИТЬ";
		КонецЕсли;
		ДоступностьНастроек = Ложь;
		ДоступностьОбновитьОтмена = Истина;
		ВидимостьПолеПользователи = Истина;
	Иначе
		ТекстКнопкиВыполнить = "Перезалить базу";
		ДоступностьНастроек = Истина;
		ДоступностьОбновитьОтмена = Ложь;
		ВидимостьПолеПользователи = Ложь;		
	КонецЕсли;

	ФормаВыбораНастроек.Элементы.Найти("ПолеСоСпискомИсточник").Доступность = ДоступностьНастроек;
	ФормаВыбораНастроек.Элементы.Найти("ПолеСоСпискомПриемник").Доступность = ДоступностьНастроек;
	ФормаВыбораНастроек.Элементы.Найти("Дата").Доступность = ДоступностьНастроек;

	ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаУдалитьИБПриемник").Доступность = ДоступностьНастроек;
	ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаСоздатьИБПриемник").Доступность = ДоступностьНастроек;
	ФормаВыбораНастроек.Элементы.Найти("ПолеИмяБазы").Доступность = (ДоступностьНастроек И ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаСоздатьИБПриемник").Значение=Истина);
	ФормаВыбораНастроек.Элементы.Найти("Дата").Доступность = (ДоступностьНастроек 
		И ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаНаМоментВремени").Значение=Ложь И ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаТекущаяКопияБазы").Значение=Ложь);
	ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаНаМоментВремени").Доступность = ДоступностьНастроек;
	ФормаВыбораНастроек.Элементы.Найти("ПолеМоментВремени").Доступность = (ДоступностьНастроек И ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаНаМоментВремени").Значение=Истина);
	ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаТекущаяКопияБазы").Доступность = ДоступностьНастроек;

	ПолеПользователи = ФормаВыбораНастроек.Элементы.Найти("ПолеПользователи");
	ПолеЛог = ФормаВыбораНастроек.Элементы.Найти("ПолеЛог");
	Если ВидимостьПолеПользователи Тогда
		Если ТаблицаПользователи <> Неопределено Тогда
			ПровайдерТЗ = Новый Провайдер;
			ПровайдерТЗ.Источник = ТаблицаПользователи;
			ПолеПользователи.ПутьКДанным = ПровайдерТЗ;
		КонецЕсли;
		ПолеЛог.Видимость = Ложь;
		ПолеПользователи.Видимость = Истина;
	Иначе
		ПолеПользователи.Видимость = Ложь;
		ПолеЛог.Видимость = Истина;
	КонецЕсли;
	
	ФормаВыбораНастроек.Элементы.Найти("КнопкаОбновить").Видимость = (ВидимостьПолеПользователи);
	ФормаВыбораНастроек.Элементы.Найти("КнопкаПродолжить").Видимость = (ВидимостьПолеПользователи);

	ГруппаКнопки = ФормаВыбораНастроек.Элементы.Найти("ГруппаКнопки");		
	ГруппаКнопки.Элементы.Найти("КнопкаВыполнить").Доступность = (Этап = 0);

КонецПроцедуры

//******************************************************************
Процедура ПриИзменииПолеСоСпискомИсточник() Экспорт
    
	ИндексБазыИсточник = ФормаВыбораНастроек.Элементы.Найти("ПолеСоСпискомИсточник").Значение;
	
КонецПроцедуры

//******************************************************************
Процедура ПриИзменииПолеСоСпискомПриемник() Экспорт
    
	ИндексБазыПриемник = ФормаВыбораНастроек.Элементы.Найти("ПолеСоСпискомПриемник").Значение;
	
	ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаСоздатьИБПриемник").Значение = Ложь;
	ФормаВыбораНастроек.Элементы.Найти("ПолеИмяБазы").Значение = "";
	ФормаВыбораНастроек.Элементы.Найти("ПолеИмяБазы").Доступность = Ложь;

КонецПроцедуры

//******************************************************************
Процедура ПриИзменииПолеФлажкаУдалитьИБПриемник() Экспорт

	ЭлементыФормы = ФормаВыбораНастроек.Элементы;
	фУдалитьИБПриемник = ЭлементыФормы.Найти("ПолеФлажкаУдалитьИБПриемник").Значение;
	
	ЭлементыФормы.Найти("ПолеСоСпискомИсточник").Видимость = (Не фУдалитьИБПриемник);
	ЭлементыФормы.Найти("ПолеФлажкаСоздатьИБПриемник").Заголовок = ?(фУдалитьИБПриемник,"Указать имя ИБ                                   ","Создать ИБ Приемник                        ");
	
	ЭлементыФормы.Найти("НадписьНаДату").Видимость = (Не фУдалитьИБПриемник);
	ЭлементыФормы.Найти("Дата").Видимость = (Не фУдалитьИБПриемник);
	ЭлементыФормы.Найти("ПолеФлажкаНаМоментВремени").Видимость = (Не фУдалитьИБПриемник);
	ЭлементыФормы.Найти("ПолеМоментВремени").Видимость = (Не фУдалитьИБПриемник);
	ЭлементыФормы.Найти("ПолеФлажкаТекущаяКопияБазы").Видимость = (Не фУдалитьИБПриемник);
	
	ЭлементыФормы.Найти("ПолеФлажкаСоздатьИБПриемник").Значение = Ложь;

КонецПроцедуры

//******************************************************************
Процедура ПриИзменииПолеФлажкаСоздатьИБПриемник() Экспорт

	фСоздатьИБПриемник = ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаСоздатьИБПриемник").Значение;
	ПолеИмяБазы = ФормаВыбораНастроек.Элементы.Найти("ПолеИмяБазы");
	ПолеИмяБазы.Доступность = (фСоздатьИБПриемник);
	Если фСоздатьИБПриемник Тогда
		ИндексБазыПриемник = ФормаВыбораНастроек.Элементы.Найти("ПолеСоСпискомПриемник").Значение;
		БазаПриемник = ТаблицаБазаПриемник.Получить(ИндексБазыПриемник);
		ПолеИмяБазы.Значение = БазаПриемник.ИмяБазы;
	Иначе
		ПолеИмяБазы.Значение = "";
	КонецЕсли;

КонецПроцедуры

//******************************************************************
Процедура ПриИзменииПолеИмяБазы() Экспорт

	Если ИндексБазыПриемник=-1 Тогда Возврат; КонецЕсли;

	БазаПриемник = ТаблицаБазаПриемник.Получить(ИндексБазыПриемник);

	ИмяБазы = ФормаВыбораНастроек.Элементы.Найти("ПолеИмяБазы").Значение;
	Если ЗначениеЗаполнено(ИмяБазы) Тогда
		БазаПриемник.ИмяБазы = ИмяБазы;
		БазаПриемник.ИмяБазыДанныхSQL = ИмяБазы;
	КонецЕсли;	 

КонецПроцедуры

//******************************************************************
Процедура ПриИзменииПолеФлажкаНаМоментВремени() Экспорт
	
	ЭлементыФормы = ФормаВыбораНастроек.Элементы;
	фВосстановитьНаМоментВремени = ЭлементыФормы.Найти("ПолеФлажкаНаМоментВремени").Значение;
	ПолеМоментВремени = ЭлементыФормы.Найти("ПолеМоментВремени");
	МоментВремени = ЭлементыФормы.Найти("Дата").Значение;
	ПолеМоментВремени.Значение = Формат(МоментВремени,"ДФ='dd.MM.yyyy ЧЧ:мм:сс'");
	ПолеМоментВремени.Доступность = (фВосстановитьНаМоментВремени);
	ЭлементыФормы.Найти("Дата").Доступность = (Не фВосстановитьНаМоментВремени);
	ЭлементыФормы.Найти("ПолеФлажкаТекущаяКопияБазы").Значение = Ложь;

КонецПроцедуры

//******************************************************************
Процедура ПриИзменииПолеФлажкаТекущаяКопияБазы() Экспорт

	ЭлементыФормы = ФормаВыбораНастроек.Элементы;
	фВосстановитьТекущуюКопиюБазы = ЭлементыФормы.Найти("ПолеФлажкаТекущаяКопияБазы").Значение;

	ЭлементыФормы.Найти("Дата").Доступность = (Не фВосстановитьТекущуюКопиюБазы);
	ЭлементыФормы.Найти("ПолеФлажкаНаМоментВремени").Значение = Ложь;
	ЭлементыФормы.Найти("ПолеМоментВремени").Доступность = Ложь;

КонецПроцедуры

//******************************************************************
Процедура СоздатьИБПриемник() 

	БазаПриемник = ТаблицаБазаПриемник.Получить(ИндексБазыПриемник);

	ПараметрыБазы1С = Новый Структура();
	Сервер1С = БазаПриемник.АдресКластера;
	Если ЗначениеЗаполнено(БазаПриемник.ПортКластера) Тогда
		Сервер1С = Сервер1С +":"+ БазаПриемник.ПортКластера;
	КонецЕсли;
	ПараметрыБазы1С.Вставить("Сервер1С",Сервер1С);
	ПараметрыБазы1С.Вставить("ИмяИБ",БазаПриемник.ИмяБазы);
	ПараметрыБазы1С.Вставить("РазрешитьРегЗадания",Ложь);
	
	ПараметрыСУБД = Новый Структура();
	ПараметрыСУБД.Вставить("СерверСУБД",БазаПриемник.АдресСервераSQL);
	ПараметрыСУБД.Вставить("ПользовательСУБД",БазаПриемник.ИмяПользователяSQL);
	ПараметрыСУБД.Вставить("ПарольСУБД",БазаПриемник.ПарольПользователяSQL);
	ПараметрыСУБД.Вставить("ИмяБД",БазаПриемник.ИмяБазыДанныхSQL);
	ПараметрыСУБД.Вставить("СоздаватьБД",Истина);
	//следующие параметры настроятся по-умолчанию: ТипСУБД="MSSQLServer" и СмещениеДат="2000"
	
	АвторизацияВКластере = Новый Структура();
	АвторизацияВКластере.Вставить("Имя",БазаПриемник.ИмяПользователяАдминистратораКластера);
	АвторизацияВКластере.Вставить("Пароль",БазаПриемник.ПарольПользователяАдминистратораКластера);

	//
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	УправлениеКонфигуратором.СоздатьСервернуюБазу(ПараметрыБазы1С,ПараметрыСУБД,АвторизацияВКластере);

КонецПроцедуры

//******************************************************************
Процедура ОтправитьУведомление(ТемаСообщения,БылиОшибки,Логирование=Неопределено,ПолеЛог=Неопределено) Экспорт
	
	СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
	СтруктураСообщения.ТемаСообщения = ТемаСообщения;
	Если БылиОшибки Тогда
		СтруктураСообщения.ТекстСообщения = "ВНИМАНИЕ! " + Символы.ПС + 
		СтруктураСообщения.ТемаСообщения + Символы.ПС +
		"Но не все операции были выполнены. Смотрите лог-файл во вложении.";
	Иначе
		СтруктураСообщения.ТекстСообщения = СтруктураСообщения.ТемаСообщения + Символы.ПС + 
		"Все операции были выполнены успешно.";
	КонецЕсли;
	
	// Часть имеющегося лога добавим в письмо
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	КопироватьФайл(Логирование.ИмяФайлаЛога,ИмяВременногоФайла);
	СтруктураСообщения.Вложения = ИмяВременногоФайла;
	
	// Отправим сообщение
	Если УправлениеЭП.ОтправитьСообщение() Тогда
		СтрокаДействие = "Отправить электорнное сообщение - УСПЕШНО. Адреса: " + СтруктураСообщения.АдресЭлектроннойПочтыПолучателя;
	Иначе
		СтрокаДействие = "Отправить электорнное сообщение - ОШИБКА: " + УправлениеЭП.ТекстОшибки;
		БылиОшибки = Истина;
	КонецЕсли;
	Если Логирование<>Неопределено Тогда
		Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
		ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
	КонецЕсли;

	УдалитьФайлы(ИмяВременногоФайла);

КонецПроцедуры

//******************************************************************
Функция УдалитьИБ(НетДоступаККонсолиКластера=Ложь)

	//
	БылиОшибки = Ложь;
	ИБУдалена = Ложь;
	ПолеЛог = ФормаВыбораНастроек.Элементы.Найти("ПолеЛог");
	ПолеЛог.Видимость = Истина;
	
	// Начало выполнения обработки
	СтрокаДействие  = "Начало выполнения обработки.";
	Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
	Логирование.УвеличитьУровень();
	ПолеЛог.Значение = СтрокаДействие;
	
	//
	БазаПриемник = ТаблицаБазаПриемник.Получить(ИндексБазыПриемник);

	Запуск1С = Новый ТУправлениеЗапуском1С();
	ЗаполнитьЗначенияСвойств(Запуск1С.ПараметрыЗапуска,БазаПриемник);

	// Завершим соединения, если необходимо
	Если Не НетДоступаККонсолиКластера Тогда
		Если ТаблицаПользователи.Количество() > 0 Тогда
			Если Запуск1С.ЗавершитьРаботуПользователей() Тогда
				СтрокаДействие = "Завершить работу пользователей - УСПЕШНО";
			Иначе
				СтрокаДействие = "Завершить работу пользователей - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
			ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
		КонецЕсли;
	КонецЕсли;
	
	// Установим блокировку начала сеансов
	Если Не НетДоступаККонсолиКластера Тогда
		Если Не БылиОшибки Тогда
			Если Запуск1С.УстановитьБлокировкуНачалаСеансов() Тогда
				СтрокаДействие = "Установить блокировку начала сеансов - УСПЕШНО";
			Иначе
				СтрокаДействие = "Установить блокировку начала сеансов - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
			ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
		КонецЕсли;
	КонецЕсли;
	ВыполнитьСборкуМусора();
	
	// Производим удаление информационной базы вместе с базой данных
	Если Не БылиОшибки Тогда
		Если Запуск1С.УдалитьИнформационнуюБазу(1) Тогда
			СтрокаДействие = "Удалить информационную базу - УСПЕШНО";
			ИБУдалена = Истина;
		Иначе
			СтрокаДействие = "Удалить информационную базу - ОШИБКА: " + Запуск1С.ТекстОшибки;
			БылиОшибки = Истина;
		КонецЕсли;
		Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
		ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
	КонецЕсли;

	// Отправляем эклектронное сообщение с файлом лога во вложении
	Если ИБУдалена И ЗначениеЗаполнено(УправлениеЭП.УчетнаяЗаписьЭП.АдресSMTP) Тогда
		ТемаСообщения = "### Удалена информационная база: """ + БазаПриемник.Имя + """";
		ОтправитьУведомление(ТемаСообщения,БылиОшибки,Логирование,ПолеЛог);
	КонецЕсли;

	//
	СтрокаДействие  = "Завершение выполнения обработки.";
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
	ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;

	Возврат Не БылиОшибки;

КонецФункции

//******************************************************************
Процедура ПриНажатииНаКнопкуЗакрыть() Экспорт

	ФормаВыбораНастроек.Закрыть();

КонецПроцедуры

//******************************************************************
Процедура ПриНажатииНаКнопкуОбновить() Экспорт

	Если Не ПолучитьСписокАктивныхСеансов() Тогда
		УправляемыйИнтерфейс.СтандартныеДиалоги.Предупреждение("Не удалось проверить список активных пользователей базы приемника!",,"Ошибка!");
		Возврат;
	КонецЕсли;
	УправлениеДиалогом(1);

КонецПроцедуры

//******************************************************************
Процедура ПриНажатииНаКнопкуВыполнить() Экспорт

	фРежимУдаления = (ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаУдалитьИБПриемник").Значение=Истина);

	// Проверим, что все поля заполнены
	Если фРежимУдаления = Ложь Тогда
		Если ИндексБазыИсточник = -1 Тогда
			УправляемыйИнтерфейс.СтандартныеДиалоги.Предупреждение("Не выбрана база источник!",,"Внимание!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ИндексБазыПриемник = -1 Тогда
		УправляемыйИнтерфейс.СтандартныеДиалоги.Предупреждение("Не выбрана база приемник!",,"Внимание!");
		Возврат;
	КонецЕсли;	
	
	// Проверим, есть ли активные сеансты с базой приемником
	ВыполнитьОбработку = Ложь;
	НетДоступаККонсолиКластера = Ложь;
	Если Не КонтрольАктивныхСеансовПройден Тогда
	
		Если Не ПолучитьСписокАктивныхСеансов() Тогда
			Если ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаСоздатьИБПриемник").Значение=Истина Тогда
				ВыполнитьОбработку = Истина;
				ТаблицаПользователи = Новый ТаблицаЗначений;
			Иначе
				Ответ = УправляемыйИнтерфейс.СтандартныеДиалоги.Вопрос("Не удалось проверить список активных пользователей базы приемника! Продолжить?",РежимДиалогаВопрос.ДаНет,,,"Все равно продолжить операцию?");
				Если Ответ = КодВозвратаДиалога.Да Тогда	
					НетДоступаККонсолиКластера = Истина;
					ВыполнитьОбработку = Истина;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Не НетДоступаККонсолиКластера Тогда
		
			Если ТаблицаПользователи = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			// Если есть активные соединения, покажим их
			Если ТаблицаПользователи.Количество() = 0 Тогда
				ВыполнитьОбработку = Истина;
			Иначе
				УправлениеДиалогом(1);
				КонтрольАктивныхСеансовПройден = Истина;			
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработку = Истина;
	КонецЕсли;
	
	// Можно выполнить обработку
	Если ВыполнитьОбработку Тогда
	
		Ответ = УправляемыйИнтерфейс.СтандартныеДиалоги.Вопрос("Вы уверены что хотите "+ ?(фРежимУдаления,"УДАЛИТЬ ИБ","перезалить базу") +"?",РежимДиалогаВопрос.ДаНет,,,"Последнее предупреждение!");
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
	
			УправлениеДиалогом(0);
			Если фРежимУдаления Тогда
				Результат = УдалитьИБ(НетДоступаККонсолиКластера);
			Иначе 
				Результат = ВыполнитьОбработку(НетДоступаККонсолиКластера);
			КонецЕсли;
			Если Результат = Истина Тогда
				УправляемыйИнтерфейс.СтандартныеДиалоги.Предупреждение("Обработка выполнена успешно!",,"Успех!");
			Иначе
				УправляемыйИнтерфейс.СтандартныеДиалоги.Предупреждение("ОБРАБОТКА НЕ ВЫПОЛНЕНА!",,"ОШИБКА!");
			КонецЕсли;		

		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

//******************************************************************
Функция ПолучитьСписокАктивныхСеансов()

	// База применик из таблицы
	БазаПриемник = ТаблицаБазаПриемник.Получить(ИндексБазыПриемник);
	
	// Получаем список сеансов
	Запуск1С = Новый ТУправлениеЗапуском1С();
	ЗаполнитьЗначенияСвойств(Запуск1С.ПараметрыЗапуска,БазаПриемник);
	ТаблицаПользователи = Запуск1С.ПолучитьСписокСеансов();
	
	Если ТаблицаПользователи = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

//******************************************************************
Функция ВыполнитьТестНастроек()

	//
	БылиОшибки = Ложь;
	
	// Начало выполнения обработки
	СтрокаДействие  = "Начало выполнения тестирвоания настроек:";
	Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
	Логирование.УвеличитьУровень();
	
	// Создадим объекты
	УправлениеMSSQL = Новый УправлениеMSSQL();
	Запуск1С = Новый ТУправлениеЗапуском1С();

	// Цикл по всем базам источникам
	Для Каждого БазаИсточник ИЗ ТаблицаБазаИсточник Цикл

		Логирование.ЗаписатьСтрокуЛога();
		Логирование.ЗаписатьСтрокуЛога("Тест БД Источника: " + БазаИсточник.Имя);

		УправлениеMSSQL.ОчиститьПараметры();
		ЗаполнитьЗначенияСвойств(УправлениеMSSQL.ПараметрыПодключения,БазаИсточник);

		// Получим структуру файлов БД Источника
		// Если структура файлов получена, считаем, что параметры подключения заданы корректно
		ТаблицаФайловБД = УправлениеMSSQL.ПолучитьСтруктуруФайловБД();
		Если ТаблицаФайловБД = Неопределено Тогда
			СтрокаДействие = "Получить структуру файлов БД Источинка - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
			БылиОшибки = Истина;
		ИначеЕсли ТаблицаФайловБД.Количество() = 0 Тогда
			СтрокаДействие = "Получить структуру файлов БД Источинка - ОШИБКА: Список файлов пуст!";
			БылиОшибки = Истина;
		Иначе
			СтрокаДействие = "Получить структуру файлов БД Источинка - УСПЕШНО";
		КонецЕсли;
		Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);

	КонецЦикла;

	// Цикл по всем базам приемникам
	Для Каждого БазаПриемник ИЗ ТаблицаБазаПриемник Цикл

		Логирование.ЗаписатьСтрокуЛога();
		Логирование.ЗаписатьСтрокуЛога("Тест БД Приемника: " + БазаПриемник.Имя);

		УправлениеMSSQL.ОчиститьПараметры();
		ЗаполнитьЗначенияСвойств(УправлениеMSSQL.ПараметрыПодключения,БазаПриемник);

		// Получим структуру файлов БД Приемника
		// Если структура файлов получена, считаем, что параметры подключения заданы корректно
		ТаблицаФайловБД = УправлениеMSSQL.ПолучитьСтруктуруФайловБД();
		Если ТаблицаФайловБД = Неопределено Тогда
			СтрокаДействие = "Получить структуру файлов БД Приемника - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
			БылиОшибки = Истина;
		ИначеЕсли ТаблицаФайловБД.Количество() = 0 Тогда
			СтрокаДействие = "Получить структуру файлов БД Приемника - ОШИБКА: Список файлов пуст!";
			БылиОшибки = Истина;
		Иначе
			СтрокаДействие = "Получить структуру файлов БД Приемника - УСПЕШНО";
		КонецЕсли;
		Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
	
		Запуск1С.ОчиститьПараметры();
		ЗаполнитьЗначенияСвойств(Запуск1С.ПараметрыЗапуска,БазаПриемник);
	
		// Получим список активных соединений БД Приемника
		// Если список сеансов получен, считаем, что настройки базы заданы корректно
		ТаблицаСеансов = Запуск1С.ПолучитьСписокСеансов();
		Если ТаблицаСеансов = Неопределено Тогда
			СтрокаДействие = "Получить список сеансов БД Приемника - ОШИБКА: " + Запуск1С.ТекстОшибки;
			БылиОшибки = Истина;
		Иначе
			СтрокаДействие = "Получить список сеансов БД Приемника - УСПЕШНО";
		КонецЕсли;
		Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);

		// Выполним очистку локального кэша хранилища конфигурации
		// Если получилось очистить, считаем, что настройки хранилища и настройки 1С:Предприятие заданы корректно
		Если ЗначениеЗаполнено(Запуск1С.ПараметрыЗапуска.АдресХранилища) Тогда
			Если Запуск1С.ВыполнитьОчисткуЛокальногоКешаХранилища() Тогда
				СтрокаДействие = "Очистить локальный кэш хранилища конфигурации - УСПЕШНО";
			Иначе
				СтрокаДействие = "Очистить локальный кэш хранилища конфигурации - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
		КонецЕсли;

	КонецЦикла;

	СтрокаДействие  = "Завершение выполнения обработки.";
	Логирование.ЗаписатьСтрокуЛога();
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);

	Сообщить("--------------------------------------------");
	Сообщить("Рзультат тестирования: " + ?(БылиОшибки,"БЫЛИ ОШИБКИ!","УСПЕШНО!"));
	Сообщить("--------------------------------------------");

	Возврат Не БылиОшибки;
	
КонецФункции

//******************************************************************
Функция ПреобразоватьСтрокуВДату(СтрокаДаты)

	Попытка
		Результат = Дата(Сред(СтрокаДаты,7,4) + Сред(СтрокаДаты,4,2) + Сред(СтрокаДаты,1,2) + Сред(СтрокаДаты,12,2) + Сред(СтрокаДаты,15,2) + Сред(СтрокаДаты,18,2));
	Исключение
		ВызватьИсключение "Ошибка преобразования строки: '" + СтрокаДаты + "' к типу 'Дата'";
	КонецПопытки;

	Возврат Результат;

КонецФункции	

	//******************************************************************
Функция ВыполнитьОбработку(НетДоступаККонсолиКластера=Ложь)

	//
	БылиОшибки = Ложь;
	БазаВосстановлена = Ложь;
	ПолеЛог = ФормаВыбораНастроек.Элементы.Найти("ПолеЛог");
	ПолеЛог.Видимость = Истина;
	
	// Начало выполнения обработки
	СтрокаДействие  = "Начало выполнения обработки.";
	Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
	Логирование.УвеличитьУровень();
	ПолеЛог.Значение = СтрокаДействие;

	// Создать ИБ Приемник (по необходимости)
	Если ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаСоздатьИБПриемник").Значение=Истина Тогда
		СоздатьИБПриемник();
	КонецЕсли;
	
	// База применик из таблицы
	БазаПриемник = ТаблицаБазаПриемник.Получить(ИндексБазыПриемник);
	Запуск1С = Новый ТУправлениеЗапуском1С();
	ЗаполнитьЗначенияСвойств(Запуск1С.ПараметрыЗапуска,БазаПриемник);

	// Завершим соединения, если необходимо
	Если Не НетДоступаККонсолиКластера Тогда
		Если ТаблицаПользователи.Количество() > 0 Тогда
			Если Запуск1С.ЗавершитьРаботуПользователей() Тогда
				СтрокаДействие = "Завершить работу пользователей - УСПЕШНО";
			Иначе
				СтрокаДействие = "Завершить работу пользователей - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
			ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
		КонецЕсли;
	КонецЕсли;
	
	// Установим блокировку начала сеансов
	Если Не НетДоступаККонсолиКластера Тогда
		Если Не БылиОшибки Тогда
			Если Запуск1С.УстановитьБлокировкуНачалаСеансов() Тогда
				СтрокаДействие = "Установить блокировку начала сеансов - УСПЕШНО";
			Иначе
				СтрокаДействие = "Установить блокировку начала сеансов - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
			ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
		КонецЕсли;
	КонецЕсли;
	ВыполнитьСборкуМусора();
	
	// База источник из таблицы
	Если Не БылиОшибки Тогда
		БазаИсточник = ТаблицаБазаИсточник.Получить(ИндексБазыИсточник);
		УправлениеMSSQL = Новый УправлениеMSSQL();
		ЗаполнитьЗначенияСвойств(УправлениеMSSQL.ПараметрыПодключения,БазаИсточник);
	КонецЕсли;
	
	// Создание Полной Текущей копии базы
	// Резервная копия только для копирования (COPY_ONLY) - не влияет на обычную последовательность создания традиционных резервных копий
	ПолноеИмяФайлаРезервнойКопии = Неопределено;
	Если ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаТекущаяКопияБазы").Значение=Истина Тогда
		Каталог = УправлениеMSSQL.ПолучитьКаталогБэкаповПоУмолчанию();
		ИмяФайла = БазаИсточник.ИмяБазыДанныхSQL + "_FULL_COPY_ONLY.bak";
		ПолноеИмяФайлаРезервнойКопии = ОбъединитьПути(Каталог,ИмяФайла);
		// удалим предыдущий бэкап
		БылиОшибки = Не УправлениеMSSQL.УдалитьФайлНаСервере(ПолноеИмяФайлаРезервнойКопии);
		МоментВосстановления = ТекущаяДата();

		Если Не БылиОшибки Тогда
			ПолноеИмяФайлаРезервнойКопии = УправлениеMSSQL.СделатьРезервнуюКопиюБД(Каталог, ИмяФайла, "FULL", "COPY_ONLY", "");
		КонецЕсли;
		Если Не БылиОшибки И ПолноеИмяФайлаРезервнойКопии <> Неопределено Тогда
			СтрокаДействие = "Создание Полной Текущей копии базы - УСПЕШНО";
		Иначе
			СтрокаДействие = "Создание Полной Текущей копии базы - ОШИБКА: ";
			БылиОшибки = Истина;
		КонецЕсли;
		Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
		ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
	КонецЕсли;

	// Получим список файлов для восстановления
	Если Не БылиОшибки Тогда
		МодельВосстановленияБД = "";
		Если ПолноеИмяФайлаРезервнойКопии <> Неопределено Тогда
			МассивФайлов = Новый Массив;
			МассивФайлов.Добавить(ПолноеИмяФайлаРезервнойКопии);
		Иначе
			Если ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаНаМоментВремени").Значение = Ложь Тогда
				ТекДата = ФормаВыбораНастроек.Элементы.Найти("Дата").Значение;
				МоментВремени = КонецДня(ТекДата); 
			Иначе
				МоментВремени = ФормаВыбораНастроек.Элементы.Найти("ПолеМоментВремени").Значение;
				МоментВремени = ПреобразоватьСтрокуВДату(МоментВремени);
				МодельВосстановленияБД = УправлениеMSSQL.ПолучитьМодельВосстановленияБД();
			КонецЕсли;
			МоментВосстановления = Неопределено;
			МассивФайлов = УправлениеMSSQL.ПолучитьСписокФайловДляВосстановленияБД(МоментВремени,МоментВосстановления); 
		КонецЕсли;

		Если МассивФайлов <> Неопределено Тогда
			СтрокаДействие = "Получить список файлов для восстановления БД - УСПЕШНО";
			Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
			ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
			Для Сч = 0 По МассивФайлов.Количество()-1 Цикл
				СтрокаДействие = "    Файл: " + МассивФайлов.Получить(Сч);
				Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
				ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
			КонецЦикла;
		Иначе
			СтрокаДействие = "Получить список файлов для восстановления БД - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
			Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
			ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
			БылиОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Получим структуру файлов БД Источника
	Если Не БылиОшибки Тогда
		ТаблицаФайловБДИсточника = УправлениеMSSQL.ПолучитьСтруктуруФайловБД();
		Если ТаблицаФайловБДИсточника = Неопределено Тогда
			СтрокаДействие = "Получить структуру файлов БД Источинка - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
			БылиОшибки = Истина;
		ИначеЕсли ТаблицаФайловБДИсточника.Количество() = 0 Тогда
			СтрокаДействие = "Получить структуру файлов БД Источинка - ОШИБКА: Список файлов пуст!";
			БылиОшибки = Истина;
		Иначе
			СтрокаДействие = "Получить структуру файлов БД Источинка - УСПЕШНО";
		КонецЕсли;
		Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
		ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
	КонецЕсли;

	// База применик из таблицы
	Если Не БылиОшибки Тогда
		УправлениеMSSQL = Новый УправлениеMSSQL();
		ЗаполнитьЗначенияСвойств(УправлениеMSSQL.ПараметрыПодключения,БазаПриемник);
	КонецЕсли;	
	
	// Восстановим базу
	Если Не БылиОшибки Тогда
		МоментВремени = Неопределено;
		Если ФормаВыбораНастроек.Элементы.Найти("ПолеФлажкаНаМоментВремени").Значение = Истина Тогда
			Если МодельВосстановленияБД = "FULL" Тогда
				МоментВремени = ПреобразоватьСтрокуВДату( ФормаВыбораНастроек.Элементы.Найти("ПолеМоментВремени").Значение );
			Иначе
				СтрокаДействие = "ВНИМАНИЕ! Для БД Источник не установлена ПОЛНАЯ (FULL) модель восстановления,-"+Символы.ПС+
								" восстановление данных будет произведено на время ближайжего разностного (или полного) бэкапа: "+ МоментВосстановления;
				Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
				ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;		
			КонецЕсли;
		КонецЕсли;
		Если УправлениеMSSQL.ВосстановитьИзРезервнойКопииБД(МассивФайлов,ТаблицаФайловБДИсточника,МоментВремени) Тогда
			СтрокаДействие = "Восстановить из резервной копии БД - УСПЕШНО";
			БазаВосстановлена = Истина;
		Иначе
			СтрокаДействие = "Восстановить из резервной копии БД - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
			БылиОшибки = Истина;
		КонецЕсли;
		Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
		ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;		
	КонецЕсли;
	
	Если ПолноеИмяФайлаРезервнойКопии <> Неопределено Тогда
		Результат = УправлениеMSSQL.УдалитьФайлНаСервере(ПолноеИмяФайлаРезервнойКопии);
	КонецЕсли;

	// Переведем в простую модель восстановления
	Если Не БылиОшибки Тогда
		Если УправлениеMSSQL.ИзменитьМодельВосстановленияБД("SIMPLE") Тогда
			СтрокаДействие = "Перевести в простую модель восстановления - УСПЕШНО";
		Иначе
			СтрокаДействие = "Перевести в простую модель восстановления - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
			БылиОшибки = Истина;
		КонецЕсли;
		Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
		ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;		
	КонецЕсли;
	
	// Запустим сжатие лог-файла
	Если Не БылиОшибки Тогда
		Если УправлениеMSSQL.СжатьФайлыБД("LOG") Тогда
			СтрокаДействие = "Сжать файл логов - УСПЕШНО";
		Иначе
			СтрокаДействие = "Сжать файл логов - ОШИБКА: " + УправлениеMSSQL.ТекстОшибки;
			БылиОшибки = Истина;
		КонецЕсли;
		Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
		ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;		
	КонецЕсли;

	// Отменим назначение главного узла РИБ
	Если Не БылиОшибки Тогда
		Если БазаПриемник.ОтключитьРИБ = Истина Тогда
			// поскольку операция отключения производится внешним соединением,- приходится временно снимать блокировку
			Если Не НетДоступаККонсолиКластера И Запуск1С.СнятьБлокировкуНачалаСеансов(Ложь) 
				И Запуск1С.ОтменитьНазначениеГлавногоУзлаРИБ() Тогда
					СтрокаДействие = "Отменить назначение главного узла РИБ - УСПЕШНО";
					Запуск1С.УстановитьБлокировкуНачалаСеансов();
				Иначе
					СтрокаДействие = "Отменить назначение главного узла РИБ  - ОШИБКА: " + Запуск1С.ТекстОшибки;
					БылиОшибки = Истина;
			КонецЕсли;
			Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
			ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
		КонецЕсли;
	КонецЕсли;

	// Если база была подключена к хранилищу, необходимо переподключится
	Если ЗначениеЗаполнено(БазаПриемник.АдресХранилища) Тогда
	
		// Отключимся от хранилища базы источника
		Если Не БылиОшибки Тогда
			Если Запуск1С.ОтключитьКонфигурациюОтХранилища() Тогда
				 СтрокаДействие = "Отключиться от хранилища - УСПЕШНО";
			Иначе
				СтрокаДействие = "Отключиться от хранилища  - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
			ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;		
		КонецЕсли;
		
		// Подключимся к старому хранилищу
		Если Не БылиОшибки Тогда
			Если Запуск1С.ПодключитьКонфигурациюКХранилищу() Тогда
				СтрокаДействие = "Подключиться к хранилищу - УСПЕШНО";
			Иначе
				СтрокаДействие = "Подключиться к хранилищу  - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
			ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;		
		КонецЕсли;
		
		// Обновим конфигурацию из хранилища
		Если Не БылиОшибки Тогда
			Если Запуск1С.ОбновитьКонфигурациюИзХранилища() Тогда
				СтрокаДействие = "Обновить конфигурацию из хранилища - УСПЕШНО";
			Иначе
				СтрокаДействие = "Обновить конфигурацию из хранилища  - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
			ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;		
		КонецЕсли;
		
		// Обновить конфигурацию базы данных
		Если Не БылиОшибки Тогда
			Если Запуск1С.ОбновитьКонфигурациюБазыДанных() Тогда
				СтрокаДействие = "Обновить конфигурацию базы данных - УСПЕШНО";
			Иначе
				СтрокаДействие = "Обновить конфигурацию базы данных  - ОШИБКА: " + Запуск1С.ТекстОшибки;
				БылиОшибки = Истина;
			КонецЕсли;
			Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
			ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;		
		КонецЕсли;
	
	КонецЕсли;
	
	// Снимем блокировку начала сеансов
	Если Не НетДоступаККонсолиКластера Тогда
		Если Запуск1С.СнятьБлокировкуНачалаСеансов(Ложь) Тогда
			СтрокаДействие = "Снять блокировку начала сеансов - УСПЕШНО";
		Иначе
			СтрокаДействие = "Снять блокировку начала сеансов - ОШИБКА: " + Запуск1С.ТекстОшибки;
			БылиОшибки = Истина;
		КонецЕсли;
		Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
		ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;
	КонецЕсли;
	ВыполнитьСборкуМусора();
	
	// Отправляем эклектронное сообщение с файлом лога во вложении
	Если БазаВосстановлена И ЗначениеЗаполнено(УправлениеЭП.УчетнаяЗаписьЭП.АдресSMTP) Тогда
	
		ТемаСообщения = "### Перезалита база данных. Источник - """ + БазаИсточник.Имя + """, Назначение - """ + БазаПриемник.Имя + """";
		ОтправитьУведомление(ТемаСообщения,БылиОшибки,Логирование,ПолеЛог);
	
	КонецЕсли;
	
	СтрокаДействие  = "Завершение выполнения обработки.";
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога(СтрокаДействие);
	ПолеЛог.Значение = ПолеЛог.Значение + Символы.ПС + СтрокаДействие;

	Возврат Не БылиОшибки;
	
КонецФункции

//******************************************************************
Инициализация();
